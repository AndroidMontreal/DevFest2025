<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/[lang]/layout.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/[lang]/layout.js" />
              <option name="originalContent" value="import GoogleAnalytics from '@/lib/GoogleAnalytics';&#10;import '@/styles/globals.css';&#10;import { Open_Sans } from 'next/font/google';&#10;import Header from '@/components/sections/Header';&#10;import Footer from '@/components/sections/Footer';&#10;import HalloweenMonsters from '@/components/elements/HalloweenMonsters';&#10;import { NextIntlClientProvider } from 'next-intl';&#10;import { locales } from '@/i18n';&#10;import { loadTranslations, namespaces } from '@/i18n/request';&#10;import { getPageMetadata } from '@/lib/metadata';&#10;import { setRequestLocale } from 'next-intl/server';&#10;import { notFound } from 'next/navigation';&#10;&#10;const openSans = Open_Sans({&#10;  weight: ['400', '700'], // Include the font weights you'll use&#10;  style: 'normal', // or italic&#10;  subsets: ['latin'],&#10;  display: 'swap',&#10;  variable: '--font-open-sans',&#10;});&#10;&#10;export async function generateMetadata({ params }) {&#10;  const { lang } = await params;&#10;  return getPageMetadata(lang, 'site'); // Pass the page key!&#10;}&#10;&#10;export default async function RootLayout({ children, params }) {&#10;  const { lang } = await params;&#10;  if (!locales.includes(lang)) notFound();&#10;  setRequestLocale(lang);&#10;  // Load the messages using the loadTranslations function&#10;  let messages;&#10;  try {&#10;    messages = await loadTranslations(lang, namespaces);&#10;  } catch (error) {&#10;    return notFound();&#10;  }&#10;&#10;  return (&#10;    &lt;NextIntlClientProvider&#10;      locale={lang}&#10;      timeZone=&quot;America/Montreal&quot;&#10;      defaultLocale=&quot;fr&quot;&#10;      now={new Date()}&#10;      messages={messages}&#10;    &gt;&#10;      &lt;HalloweenMonsters /&gt;&#10;      &lt;Header /&gt;&#10;      &lt;main className=&quot;container flex mx-auto px-5 flex-col flex-grow&quot;&gt;&#10;        {/* Allow main content to expand */}&#10;        {children}&#10;      &lt;/main&gt;&#10;      &lt;Footer /&gt;&#10;      &lt;GoogleAnalytics /&gt;&#10;    &lt;/NextIntlClientProvider&gt;&#10;  );&#10;}&#10;&#10;// Generate static paths for all supported languages&#10;&#10;export function generateStaticParams() {&#10;  return locales.map((locale) =&gt; ({ lang: locale }));&#10;}&#10;" />
              <option name="updatedContent" value="import GoogleAnalytics from '@/lib/GoogleAnalytics';&#10;import '@/styles/globals.css';&#10;import { Open_Sans } from 'next/font/google';&#10;import Header from '@/components/sections/Header';&#10;import Footer from '@/components/sections/Footer';&#10;import HalloweenMonsters from '@/components/elements/HalloweenMonsters';&#10;import { NextIntlClientProvider } from 'next-intl';&#10;import { locales } from '@/i18n';&#10;import { loadTranslations, namespaces } from '@/i18n/request';&#10;import { getPageMetadata } from '@/lib/metadata';&#10;import { setRequestLocale } from 'next-intl/server';&#10;import { notFound } from 'next/navigation';&#10;&#10;const openSans = Open_Sans({&#10;  weight: ['400', '700'], // Include the font weights you'll use&#10;  style: 'normal', // or italic&#10;  subsets: ['latin'],&#10;  display: 'swap',&#10;  variable: '--font-open-sans',&#10;});&#10;&#10;export async function generateMetadata({ params }) {&#10;  const { lang } = await params;&#10;  return getPageMetadata(lang, 'site'); // Pass the page key!&#10;}&#10;&#10;export default async function RootLayout({ children, params }) {&#10;  const { lang } = await params;&#10;  if (!locales.includes(lang)) notFound();&#10;  setRequestLocale(lang);&#10;  // Load the messages using the loadTranslations function&#10;  let messages;&#10;  try {&#10;    messages = await loadTranslations(lang, namespaces);&#10;  } catch (error) {&#10;    return notFound();&#10;  }&#10;&#10;  return (&#10;    &lt;NextIntlClientProvider&#10;      locale={lang}&#10;      timeZone=&quot;America/Montreal&quot;&#10;      defaultLocale=&quot;fr&quot;&#10;      now={new Date()}&#10;      messages={messages}&#10;    &gt;&#10;      &lt;HalloweenMonsters /&gt;&#10;      &lt;Header /&gt;&#10;      &lt;main className=&quot;container flex mx-auto px-5 flex-col flex-grow&quot;&gt;&#10;        {/* Allow main content to expand */}&#10;        {children}&#10;      &lt;/main&gt;&#10;      &lt;Footer /&gt;&#10;      &lt;GoogleAnalytics /&gt;&#10;    &lt;/NextIntlClientProvider&gt;&#10;  );&#10;}&#10;&#10;// Generate static paths for all supported languages&#10;&#10;export function generateStaticParams() {&#10;  return locales.map((locale) =&gt; ({ lang: locale }));&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>